@page "/foundryagent"
@using Microsoft.AspNetCore.Components
@using Azure.AI.Agents.Persistent
@using CRUDTasksWithAgent.Models
@using Microsoft.Net.Http.Headers
@using Azure
@inject CRUDTasksWithAgent.Services.IFoundryAgentProvider FoundryProvider
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@rendermode InteractiveServer

@if (!FoundryProvider.IsConfigured)
{
    <div class="alert alert-warning" role="alert">
        The Foundry agent is not configured. Please set the required environment variables 
        (<code>AzureAIFoundryProjectEndpoint</code> and <code>AzureAIFoundryAgentId</code>) 
        in your appsettings or environment to enable this feature.
    </div>
}
else
{
    <div class="container-fluid d-flex flex-column align-items-center justify-content-center" style="height: 100vh;">
        <div class="card shadow w-100" style="max-width: 600px; height: 80vh; min-height: 400px; display: flex; flex-direction: column;">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Azure AI Foundry Agent</h3>
            </div>
            <div class="card-body flex-grow-1 overflow-auto" id="chatMessages" style="min-height: 0;">
                @{
                    MessageRole? lastRole = null;
                }
                @if (chatHistory != null)
                {
                    foreach (var message in chatHistory)
                    {
                        bool showAvatar = lastRole != message.Role;
                        if (showAvatar)
                        {
                            <div class="my-2 fw-bold d-flex @(message.Role == MessageRole.User ? "justify-content-end" : "justify-content-start")">
                                @(message.Role == MessageRole.User ? "User" : "Agent")
                            </div>
                        }
                        <div class="mb-2 p-2 rounded @((message.Role == MessageRole.User) ? "bg-primary text-white ms-auto" : "bg-success bg-opacity-10 text-dark me-auto")" style="max-width: 80%; word-break: break-word;">
                            @if (message.ContentItems != null)
                            {
                                foreach (var content in message.ContentItems)
                                {
                                    if (content is MessageTextContent textContent)
                                    {
                                        @((MarkupString)textContent.Text.Replace("\n", "<br />"))
                                    }
                                    else
                                    {
                                        <span>Unsupported content type</span>
                                    }
                                }
                            }
                        </div>
                        lastRole = message.Role;
                    }
                }
            </div>
            <div class="card-footer bg-light">
                <EditForm Model="this" OnValidSubmit="SendMessageAsync" FormName="chatForm">
                    <div class="input-group">
                        <InputText @bind-Value="userInput" @onkeypress="HandleKeyPress" class="form-control" placeholder="Type your message..." disabled="@isLoading" />
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">Send</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading;
    private string? chatMessage { get; set; }
    private Pageable<PersistentThreadMessage>? chatHistory;
    private string threadId => FoundryProvider.ThreadId!;

    private string? userInput;
    private PersistentAgent agent => FoundryProvider.Agent!;

    private PersistentAgentsClient client => FoundryProvider.Client!;

    // Given the injected client, agent, and thread ID, this code shows the standard pattern of:
    // 1. Add the user prompt to the thread
    // 2. Create a run to process the user prompt in a run
    // 3. Poll for completion
    // 4. Get the result from the thread
    private async Task SendMessageAsync()
    {
        if (string.IsNullOrWhiteSpace(userInput))
        {
            return;
        }

        isLoading = true;
        var input = userInput;
        userInput = string.Empty;
        StateHasChanged();

        // Add the user prompt to the messages in the thread.
        await client.Messages.CreateMessageAsync(
            threadId,
            MessageRole.User,
            input);

        // Update the chat history and refresh the page
        chatHistory = client.Messages.GetMessages(
            threadId: threadId,
            order: ListSortOrder.Ascending);
        StateHasChanged();

        // Begin processing user's question with the ThreadRun
        ThreadRun run = await client.Runs.CreateRunAsync(
            threadId,
            agent.Id);

        //Poll for completion.
        do
        {
            await Task.Delay(TimeSpan.FromMilliseconds(500));
            run = await client.Runs.GetRunAsync(threadId, run.Id);
        }
        while (run.Status == RunStatus.Queued
            || run.Status == RunStatus.InProgress
            || run.Status == RunStatus.RequiresAction);

        //Get the messages in the thread, including both agent and user messages.
        chatHistory = client.Messages.GetMessages(
            threadId: threadId,
            order: ListSortOrder.Ascending);

        isLoading = false;
        StateHasChanged();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(userInput) && !isLoading)
        {
            await SendMessageAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("eval", @"
            var element = document.getElementById('chatMessages');
            if (element) {
                element.scrollTop = element.scrollHeight;
            }
        ");
    }
}
